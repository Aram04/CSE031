Lab09 TPS Activity

Aram Shkhyan
Marcelo Rodriguez 
Hajin Park

Activity 1

4. A machine instruction contains 32 bits.

5. There are three types of machine instructions: R-type, I-type, and J-type. Examples of two operations for each type are:
R-type: add, sub
I-type: addi, lw
J-type: j, jal

6.a.
MIPS code: addi $s0, $zero, 25
Instruction type: I-type
Number of fields: 4
Field names: opcode, rs, rt, immediate

6.b.
Opcode of addi in hex: 8
Register rs: $zero aka $0
Value of $zero in hex: 0x0
Register rt: $s0
Value of $s0 in hex: 0x10
Value of immediate in hex: 0x19

6.c.
Machine code in binary: 0010 0000 0001 0000 0000 0000 0001 1001
Machine code in hex: 0x20100019

7.a.
Address 0x00400010 in decimal: 4194320
Address 4194320: line 14 slt $t0, $s1, $s0
Machine code in hex: 0x0230402a
Machine code in binary: 0000 0010 0011 0000 0100 0000 0010 1010

7.b.
Machine code in binary: 000000 10001 10000 01000 00000 101010
The instruction type is R-type. I can tell this because the first 6 bits are all 0s.
Field names: opcode, rs, rt, rd, shamt, funct

7.c.
Opcode in hex: 0x0
Rs in hex: 0x11
Rt in hex: 0x10
Rd in hex: 0x8
Shamt in hex: 0x0
Funct in hex: 0x2a

7.d.
This instruction is the slt operation. I can tell because the funct field is 2a in hex which the MIPS
Reference Sheet tells me is slt.
Rs = $s1
Rt = $s0
Rd = $t0

7.e.
Slt $t0, $s1, $s0
This is the same as the Source Column in the Text Segment

8.a.
Line 17: bne $t0, $zero, LESS
This instruction is an I-type instruction.

8.b.
Opcode in hex: 0x5
Rs in hex: 0x8
Rt in hex: 0x0

8.c.
The target label is called LESS. The address of LESS in hex is 0x40001C

8.d.
No. The immediate stored as the target address is only 16 bits long, not the full 32-bit
address. Instead, the immediate field stores the offset of the addresses between the next
instruction and the target label.

8.e.
The value of the immediate field is the leftmost 16 bits of the 32-bit instruction.
0000 0000 0000 0001 = 0x1
The offset from the instruction after the branch to LESS is only 4 bytes. We can 
calculate the address by appending 00 to the immediate field and then adding the
address of PS + 4.

8.f.
Machine code in binary: 0001 0101 0000 0000 0000 0000 0000 0001
Machine code in hex: 0x15000001

9.a.
This instruction is a J-type.
This instruction has two fields, opcode and address.

9.b.
Opcode in hex: 0x2

9.c.
The target label is GREQ at address 0x00400030

9.d.
The address field can hold 26 bits. We can squeeze the address into this field by removing
the last two 0s as well as the first four bits, turning a 32-bit address into a 26-bit address.
The compiler reconstructs the address by appending the two 0s again and then prepending the address
with the first four bits of the PC, under the assumption that the jump distance is not too big.
The value of the address field in binary is 0000 0100 0000 0000 0000 0011 00.

9.e.
Machine code in hex: 0x0810000c
Machine code in binary: 0000 1000 0001 0000 0000 0000 0000 1100
